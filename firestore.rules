// Firestore Security Rules
// Copy these rules to your Firebase Console -> Firestore Database -> Rules tab

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to validate journal entry data
    function isValidJournalEntry() {
      let data = request.resource.data;
      let requiredFields = ['gratitude', 'challenges', 'learning', 'emotion', 'date', 'userId', 'createdAt', 'updatedAt'];
      
      // Check required fields exist
      let hasRequiredFields = data.keys().hasAll(requiredFields);
      
      // Validate core data types and constraints
      let validCoreData = data.gratitude is string &&
             data.challenges is string &&
             data.learning is string &&
             data.emotion is string &&
             data.date is string &&
             data.userId == request.auth.uid &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp &&
             data.gratitude.size() <= 1000 &&
             data.challenges.size() <= 1000 &&
             data.learning.size() <= 1000 &&
             data.emotion in ['happy', 'excited', 'calm', 'grateful', 'content', 'neutral', 'tired', 'stressed', 'anxious', 'sad', 'frustrated', 'overwhelmed'];
      
      // Allow optional social fields (reactions, comments, isPublic, etc.)
      return hasRequiredFields && validCoreData;
    }
    
    // Helper function to check if entry is public
    function isPublicEntry() {
      return resource.data.isPublic == true;
    }
    
    // Helper function to validate social interactions
    function isValidReaction() {
      let data = request.resource.data;
      return data.keys().hasAll(['userId', 'userDisplayName', 'type', 'createdAt']) &&
             data.userId == request.auth.uid &&
             data.userDisplayName is string &&
             data.type is map &&
             data.type.keys().hasAll(['value', 'emoji', 'label']) &&
             data.type.value is string &&
             data.type.emoji is string &&
             data.type.label is string &&
             data.createdAt is timestamp;
    }
    
    function isValidComment() {
      let data = request.resource.data;
      return data.keys().hasAll(['userId', 'userDisplayName', 'userInitials', 'content', 'createdAt', 'updatedAt']) &&
             data.userId == request.auth.uid &&
             data.userDisplayName is string &&
             data.userInitials is string &&
             data.content is string &&
             data.content.size() <= 500 &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }
    
    // Helper function to check if mood story is public
    function isPublicMoodStory() {
      return resource.data.isPublic == true;
    }
    
    // Helper function to validate mood story data
    function isValidMoodStory() {
      let data = request.resource.data;
      let requiredFields = ['userId', 'userName', 'emotion', 'emoji', 'isPublic', 'date', 'createdAt', 'updatedAt'];
      
      // Check required fields exist
      let hasRequiredFields = data.keys().hasAll(requiredFields);
      
      // Validate core data types and constraints
      let validCoreData = data.userId == request.auth.uid &&
             data.userName is string &&
             data.emotion is string &&
             data.emoji is string &&
             data.isPublic is bool &&
             data.date is string &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp &&
             data.userName.size() <= 100 &&
             data.emotion in ['happy', 'excited', 'calm', 'grateful', 'content', 'neutral', 'tired', 'stressed', 'anxious', 'sad', 'frustrated', 'overwhelmed'];
      
      // Validate optional custom message
      let validOptionalFields = !data.keys().hasAny(['customMessage']) || 
                                (data.customMessage is string && data.customMessage.size() <= 280);
      
      return hasRequiredFields && validCoreData && validOptionalFields;
    }
    
    // Helper function to validate mood reaction data
    function isValidMoodReaction() {
      let data = request.resource.data;
      return data.keys().hasAll(['userId', 'userName', 'type', 'emoji', 'createdAt', 'moodStoryId']) &&
             data.userId == request.auth.uid &&
             data.userName is string &&
             data.type is string &&
             data.emoji is string &&
             data.createdAt is timestamp &&
             data.moodStoryId is string &&
             data.type in ['support', 'love', 'strength', 'care', 'inspire', 'hug'];
    }
    
    // Helper function to validate user stats
    function isValidUserStats() {
      let data = request.resource.data;
      return data.keys().hasAll(['currentStreak', 'longestStreak', 'totalEntries', 'badges', 'level', 'xp']) &&
             data.currentStreak is int &&
             data.longestStreak is int &&
             data.totalEntries is int &&
             data.badges is list &&
             data.level is int &&
             data.xp is int &&
             data.currentStreak >= 0 &&
             data.longestStreak >= 0 &&
             data.totalEntries >= 0 &&
             data.level >= 1 &&
             data.xp >= 0;
    }

    // Journal entries collection
    match /journal-entries/{documentId} {
      // Users can read their own entries OR public entries
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isPublicEntry());
      
      // Users can only create entries for themselves with valid data
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.userId) && 
                       isValidJournalEntry();
      
      // Users can update their own entries OR add reactions/comments to public entries OR increment views on public entries
      allow update: if isAuthenticated() && 
                       (
                         // Owner can update their own entry
                         (isOwner(resource.data.userId) && isOwner(request.resource.data.userId) && isValidJournalEntry()) ||
                         // Anyone can add reactions/comments to public entries
                         (isPublicEntry() && 
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions', 'comments', 'updatedAt', 'totalReactions', 'totalComments']) &&
                          request.resource.data.userId == resource.data.userId) ||
                         // Anyone can increment view count on public entries
                         (isPublicEntry() && 
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views']) &&
                          request.resource.data.userId == resource.data.userId)
                       );
      
      // Users can only delete their own entries
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
      
      // Subcollection: Reactions
      match /reactions/{reactionId} {
        // Anyone can read reactions on public entries, only owner can read reactions on private entries
        allow read: if isAuthenticated() && (isPublicEntry() || isOwner(get(/databases/$(database)/documents/journal-entries/$(documentId)).data.userId));
        
        // Users can only create their own reactions with valid data
        allow create: if isAuthenticated() && isValidReaction();
        
        // Users can only update their own reactions
        allow update: if isAuthenticated() && isOwner(resource.data.userId) && isValidReaction();
        
        // Users can only delete their own reactions
        allow delete: if isAuthenticated() && isOwner(resource.data.userId);
      }
      
      // Subcollection: Comments
      match /comments/{commentId} {
        // Anyone can read comments on public entries, only owner can read comments on private entries
        allow read: if isAuthenticated() && (isPublicEntry() || isOwner(get(/databases/$(database)/documents/journal-entries/$(documentId)).data.userId));
        
        // Users can only create their own comments with valid data
        allow create: if isAuthenticated() && isValidComment();
        
        // Users can only update their own comments
        allow update: if isAuthenticated() && isOwner(resource.data.userId) && isValidComment();
        
        // Users can only delete their own comments
        allow delete: if isAuthenticated() && isOwner(resource.data.userId);
      }
    }

    // User stats collection
    match /user-stats/{userId} {
      // Users can only read their own stats
      allow read: if isAuthenticated() && isOwner(userId);
      
      // Users can only create their own stats with valid data
      allow create: if isAuthenticated() && 
                       isOwner(userId) && 
                       isValidUserStats();
      
      // Users can only update their own stats with valid data
      allow update: if isAuthenticated() && 
                       isOwner(userId) && 
                       isValidUserStats();
      
      // Prevent deletion of user stats
      allow delete: if false;
    }

    // Mood Stories Collection
    match /mood-stories/{moodId} {
      // Users can read all public mood stories and their own mood stories
      allow read: if isAuthenticated() && 
                     (isPublicMoodStory() || isOwner(resource.data.userId));
      
      // Users can only create their own mood stories with valid data
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.userId) && 
                       isValidMoodStory();
      
      // Users can only update their own mood stories with valid data
      allow update: if isAuthenticated() && 
                       isOwner(resource.data.userId) && 
                       isValidMoodStory();
      
      // Users can only delete their own mood stories
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Mood Reactions Collection
    match /mood-reactions/{reactionId} {
      // Users can read reactions on public mood stories
      allow read: if isAuthenticated();
      
      // Users can only create their own reactions with valid data
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.userId) && 
                       isValidMoodReaction();
      
      // Users can only update their own reactions
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      
      // Users can only delete their own reactions
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // System can create notifications for users
      allow create: if isAuthenticated() && 
                       request.resource.data.userId is string;
      
      // Users can update their own notifications (mark as read, etc.)
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
      
      // Users can delete their own notifications
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }

    // Notification Settings Collection
    match /notification-settings/{userId} {
      // Users can manage their own notification settings
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // User Settings Collection (for notification preferences)
    match /userSettings/{userId} {
      // Users can manage their own settings
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
